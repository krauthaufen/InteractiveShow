#!fsharp

#r "nuget: FSharp.Data.Adaptive"
#r "nuget: Adaptify.Core"
#r "nuget: Aardvark.Base"
#r "nuget: Aardvark.Base.FSharp"
#r "nuget: Aardvark.Rendering.GL"
#r "nuget: Aardvark.Application.Slim.GL"
#r "nuget: Aardvark.SceneGraph"
#r "nuget: Aardvark.UI"
#r "nuget: Aardvark.UI.Primitives"

#!fsharp

// temporary lib code => move to package

open FSharp.Data.Adaptive
open Microsoft.DotNet.Interactive
open Aardvark.Base
open Aardvark.UI
open Aardvark.SceneGraph
open FSharp.Data.Adaptive
open Aardvark.Base.Rendering

System.Console.SetOut System.IO.TextWriter.Null
IntrospectionProperties.CustomEntryAssembly <- typeof<ISg<_>>.Assembly
Aardvark.Init()

[<AutoOpen>]
module rec Show = 
    open FSharp.Data.Adaptive
    open System.Net
    open System.Text
    open Aardvark.UI
    open Aardvark.UI.Primitives
    open Aardvark.Application
    open Aardvark.Application.Slim
    open Suave
    open Suave.WebPart

    let inline toHTMLAux (a : ^a) (b : ^b) =
        System.Console.SetOut System.IO.TextWriter.Null
        ((^a or ^b) : (static member ToHTML : ^b -> string) (b))

    type Shower private() =

        static let app = lazy (new OpenGlApplication())

        static let freePort () =
            let l = new System.Net.Sockets.TcpListener(IPAddress.Any, 0)
            l.Start()
            let ep = l.Server.LocalEndPoint :?> IPEndPoint
            l.Stop()
            ep.Port

        static member ToHTML (sg : ISg<_>) =
            let runtime = app.Value.Runtime
            let app =   
                {
                    initial = FreeFlyController.initial
                    update = FreeFlyController.update
                    view = fun m ->
                        let atts =
                            AttributeMap.ofList [
                                style "background-color: #37373D"
                                attribute "data-quality" "100"
                                attribute "data-samples" "8"
                            ]
                        FreeFlyController.controlledControl m id (Frustum.perspective 60.0 0.1 100.0 1.0 |> AVal.constant) atts sg
                    threads = FreeFlyController.threads
                    unpersist = Unpersist.instance
                }

            let mapp = App.start app

            let port = freePort()
            let server = 
                WebPart.startServer port [ 
                    MutableApp.toWebPart' runtime false mapp
                ]
                
            $"<iframe src=\"http://localhost:{port}/\" style='width: 720px; height: 405px'></iframe>"

        static member ToHTML (img : PixImage) =
            use ms = new System.IO.MemoryStream()
            img.SaveAsImage(ms, PixFileFormat.Png)
            let data = ms.ToArray() |> System.Convert.ToBase64String
            $"<div><code>PixImage</code>&lt;<code>{img.PixFormat.Type.Name}</code>&gt;({img.Size.X}, {img.Size.Y}, <code>Col.Format.{img.Format}</code>)" +
            $"<div style='padding-left: 20px'><img onclick=\"event.target.src='';\" style='max-width: 100%%; max-height: 100%%' src='data:image/png;base64,{data}'></img></div></div>"

        static member MatrixToHTML<'a, 'b when 'b :> IMatrix<'a>> (mat : 'b, inner : 'a -> string) =
            let b = StringBuilder()

            b.Append $"<div><code>{mat.GetType().Name}</code>" |> ignore
            b.Append "<table style='width: 0px'>" |> ignore
            for r in 0L .. mat.Dim.Y - 1L do   
                b.Append "<tr>" |> ignore
                for c in 0L .. mat.Dim.X - 1L do
                    b.Append $"<td>{inner mat.[c,r]}</td>" |> ignore
                b.Append "</tr>" |> ignore

            b.Append "</table></div>" |> ignore
            b.ToString()


        static member VectorToHTML<'a, 'b when 'b :> IVector<'a>> (mat : 'b, inner : 'a -> string) =
            let b = StringBuilder()

            b.Append $"<div><code>{mat.GetType().Name}</code>" |> ignore
            b.Append "<table style='width: 0px'><tr>" |> ignore
            for r in 0L .. mat.Dim - 1L do   
                b.Append $"<td>{inner mat.[r]}</td>" |> ignore
            b.Append "</tr></table></div>" |> ignore
            b.ToString()

        static member OptionToHTML(value : option<'a>, inner : 'a -> string) =
            match value with
            | Some value -> 
                $"<div><code>Some</code><br /><div style='padding-left: 20px'>{inner value}</div></div"
            | None -> 
                "<code>None</code>"

        static member ToHTML (value : float) =
            $"{value}"

        static member ToHTML (value : string) =
            if isNull value then "null"
            else $"\"{value}\""

        static member ToHTML (value : float32) =
            $"{value}"

        static member ToHTML (vec : V2d) =
            $"<code>V2d({vec.X}, {vec.Y})</code>"

        static member inline ToHTML (mat : option<'a>) =
            Shower.OptionToHTML(mat, toHTMLAux Unchecked.defaultof<Shower>)

        static member inline ToHTML (mat : IMatrix<'a>) =
            Shower.MatrixToHTML(mat, toHTMLAux Unchecked.defaultof<Shower>)

        static member inline ToHTML (mat : IVector<'a>) =
            Shower.VectorToHTML(mat, toHTMLAux Unchecked.defaultof<Shower>)


    let inline toHTML a = toHTMLAux Unchecked.defaultof<Shower> a

    let inline show a = display (HTML (toHTML a))

    let markdown (a : string) = Kernel.display(a, "text/markdown")

#!fsharp

let img =
    let img = PixImage<byte>(Col.Format.RGBA, V2i(256, 256))
    let m = 
        img.GetMatrix<C4b>().SetByCoord (fun (c : V2l) ->
            let a = c / 32L
            let v = a.X + a.Y
            if v % 2L = 0L then C4b.White
            else C4b.Gray
        )
    img

markdown "## Show a PixImage"
show img
markdown "## and a `Matrix`"
show (M44f.Rotation(V3f.III, 1.234f))

#!fsharp

markdown "## and other things..."
show V3d.NaN
show (Vector<string> [| "a"; "b"; "c"; "d"; null |])
show (Some V3d.NaN)
show (Some (Some img))

#!fsharp

markdown "## Or a Scenegraph (with camera controller)"
show (
    Sg.box (AVal.constant C4b.Red) (AVal.constant Box3d.Unit) 
    |> Sg.scale 4.0
    |> Sg.diffuseTexture' (PixTexture2d(PixImageMipMap [| img :> PixImage |], true))
    |> Sg.shader {
        do! DefaultSurfaces.trafo
        do! DefaultSurfaces.diffuseTexture
        do! DefaultSurfaces.simpleLighting
    }    
    |> Sg.noEvents
)



show (
    Sg.sphere' 5 C4b.White 1.0
    |> Sg.scale 4.0
    |> Sg.shader {
        do! DefaultSurfaces.trafo
        do! DefaultSurfaces.simpleLighting
    }    
    |> Sg.noEvents
)
